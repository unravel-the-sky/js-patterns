{"version":3,"sources":["script.js"],"names":["list","strategies","checkRole","val","checkGrade","checkJob","includes","checkType","Validator","cache","validationResult","add","method","push","check","forEach","element","validatorCheck","data","testData","role","grade","job","type","compose","validator","result","console","log","EventEmitter","events","on","eventName","callback","trigger","arg","listener","eventEmitter","Write","writeTurkish","Decorator","old","oldWrite","writeEnglish","newWrite","newSkill","smartGuy","decorator","Object","assign","prototype","sameGuy","swim","setSwimProperties","speed","direction","getSwimProperties","Reptile","name","alligator","Chain","fn","setNext","run","applyDevice","selectAddress","selectChecker","chainApplyDevice","chainSelectAddress","chainSelectChecker"],"mappings":";;AAAA;;;AAIA;AACA,IAAMA,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,CAAb;AACA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,mBAAUC,GAAV,EAAe;AACxB,WAAOA,GAAG,KAAK,YAAf;AACD,GAHgB;AAIjBC,EAAAA,UAAU,EAAE,oBAAUD,GAAV,EAAe;AACzB,WAAOA,GAAG,GAAG,CAAb;AACD,GANgB;AAOjBE,EAAAA,QAAQ,EAAE,kBAAUF,GAAV,EAAe;AACvB,WAAOH,IAAI,CAACM,QAAL,CAAcH,GAAd,CAAP;AACD,GATgB;AAUjBI,EAAAA,SAAS,EAAE,mBAAUJ,GAAV,EAAe;AACxB,WAAOA,GAAG,KAAK,QAAf;AACD;AAZgB,CAAnB;;IAeMK,YACJ,qBAAc;AAAA;;AAAA;;AACZ,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,gBAAL,GAAwB,IAAxB;;AACA,OAAKC,GAAL,GAAW,UAACR,GAAD,EAAMS,MAAN,EAAiB;AAC1B,IAAA,KAAI,CAACH,KAAL,CAAWI,IAAX,CAAgB,YAAM;AACpB,aAAOZ,UAAU,CAACW,MAAD,CAAV,CAAmBT,GAAnB,CAAP;AACD,KAFD;AAGD,GAJD;;AAKA,OAAKW,KAAL,GAAa,YAAM;AACjB,IAAA,KAAI,CAACL,KAAL,CAAWM,OAAX,CAAmB,UAACC,OAAD,EAAa;AAC9B,UAAMC,cAAc,GAAGD,OAAvB;AACA,UAAME,IAAI,GAAGD,cAAc,EAA3B;AACA,UAAI,CAACC,IAAL,EAAW,KAAI,CAACR,gBAAL,GAAwB,KAAxB;AACZ,KAJD;;AAKA,WAAO,KAAI,CAACA,gBAAZ;AACD,GAPD;AAQD;;AAGH,IAAMS,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,YADS;AAEfC,EAAAA,KAAK,EAAE,CAFQ;AAGfC,EAAAA,GAAG,EAAE,GAHU;AAIfC,EAAAA,IAAI,EAAE;AAJS,CAAjB;;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,MAAMC,SAAS,GAAG,IAAIjB,SAAJ,EAAlB;AACAiB,EAAAA,SAAS,CAACd,GAAV,CAAcQ,QAAQ,CAACC,IAAvB,EAA6B,WAA7B;AACAK,EAAAA,SAAS,CAACd,GAAV,CAAcQ,QAAQ,CAACE,KAAvB,EAA8B,YAA9B;AACAI,EAAAA,SAAS,CAACd,GAAV,CAAcQ,QAAQ,CAACI,IAAvB,EAA6B,WAA7B;AACAE,EAAAA,SAAS,CAACd,GAAV,CAAcQ,QAAQ,CAACG,GAAvB,EAA4B,UAA5B;AAEA,MAAMI,MAAM,GAAGD,SAAS,CAACX,KAAV,EAAf;AACA,SAAOY,MAAP;AACD,CATD;;AAWA,IAAMhB,gBAAgB,GAAGc,OAAO,EAAhC;AACAG,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmClB,gBAAnC,GAEA;AACA;;IACMmB,eACJ,wBAAc;AAAA;;AAAA;;AACZ,OAAKC,MAAL,GAAc,EAAd;;AACA,OAAKC,EAAL,GAAU,UAACC,SAAD,EAAYC,QAAZ,EAAyB;AACjC,IAAA,MAAI,CAACH,MAAL,CAAYE,SAAZ,IACI,MAAI,CAACF,MAAL,CAAYE,SAAZ,EAAuBnB,IAAvB,CAA4BoB,QAA5B,CADJ,GAEK,MAAI,CAACH,MAAL,CAAYE,SAAZ,IAAyB,CAACC,QAAD,CAF9B;AAGD,GAJD;;AAKA,OAAKC,OAAL,GAAe,UAACF,SAAD,EAAuB;AAAA,sCAARG,GAAQ;AAARA,MAAAA,GAAQ;AAAA;;AACpC,QAAI,MAAI,CAACL,MAAL,CAAYE,SAAZ,CAAJ,EAA4B;AAC1B,MAAA,MAAI,CAACF,MAAL,CAAYE,SAAZ,EAAuBjB,OAAvB,CAA+B,UAACqB,QAAD,EAAc;AAC3CA,QAAAA,QAAQ,MAAR,SAAYD,GAAZ;AACD,OAFD;AAGD;AACF,GAND;AAOD;;AAGH,IAAME,YAAY,GAAG,IAAIR,YAAJ,EAArB;AACAQ,YAAY,CAACN,EAAb,CAAgB,SAAhB,EAA2B,YAAM;AAC/BJ,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,CAFD;AAIAS,YAAY,CAACH,OAAb,CAAqB,SAArB,GAEA;;IACMI,QACJ,iBAAc;AAAA;;AACZ,OAAKC,YAAL,GAAoB,YAAM;AACxBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;AAGD;;IAGGY,YACJ,mBAAYC,GAAZ,EAAiB;AAAA;;AAAA;;AACf,OAAKC,QAAL,GAAgBD,GAAG,CAACF,YAApB;;AACA,OAAKI,YAAL,GAAoB,YAAM;AACxBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,GAFD;;AAGA,OAAKgB,QAAL,GAAgB,YAAM;AACpB,IAAA,MAAI,CAACF,QAAL;;AACA,IAAA,MAAI,CAACC,YAAL;AACD,GAHD;AAID;;AAGH,IAAME,QAAQ,GAAG;AACfF,EAAAA,YADe,0BACA;AACb,WAAOhB,OAAO,CAACC,GAAR,CAAY,8BAAZ,CAAP;AACD;AAHc,CAAjB;AAMA,IAAMkB,QAAQ,GAAG,IAAIR,KAAJ,EAAjB;AACA,IAAMS,SAAS,GAAG,IAAIP,SAAJ,CAAcM,QAAd,CAAlB;AACAC,SAAS,CAACH,QAAV,IAEA;;AACAI,MAAM,CAACC,MAAP,CAAcX,KAAK,CAACY,SAApB,EAA+BL,QAA/B;AACA,IAAMM,OAAO,GAAG,IAAIb,KAAJ,EAAhB;AACAa,OAAO,CAACZ,YAAR;AACAY,OAAO,CAACR,YAAR,IAEA;AACA;;AACA,IAAIS,IAAI,GAAG;AACTC,EAAAA,iBADS,6BACSC,KADT,EACgBC,SADhB,EAC2B;AAClC,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD,GAJQ;AAMTC,EAAAA,iBANS,+BAMW;AAClB7B,IAAAA,OAAO,CAACC,GAAR,oBAAwB,KAAK0B,KAA7B,sBAA8C,KAAKC,SAAnD;AACD;AARQ,CAAX;;IAWME,UACJ,iBAAYC,IAAZ,EAAkB;AAAA;;AAChB,OAAKA,IAAL,GAAYA,IAAZ;AACD;;AAGH,IAAIC,SAAS,GAAG,IAAIF,OAAJ,CAAY,WAAZ,CAAhB;AACAT,MAAM,CAACC,MAAP,CAAcQ,OAAO,CAACP,SAAtB,EAAiCE,IAAjC;AACAO,SAAS,CAACN,iBAAV,CAA4B,OAA5B,EAAqC,UAArC;AACAM,SAAS,CAACH,iBAAV;AAEA;;;AAGA;;IACMI,QACJ,eAAYC,EAAZ,EAAgB;AAAA;;AACd,OAAKA,EAAL,GAAUA,EAAV;;AACA,OAAKC,OAAL,GAAe,YAAM,CAAE,CAAvB;;AACA,OAAKC,GAAL,GAAW,YAAM,CAAE,CAAnB;AACD;;AAGH,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM,CAAE,CAA5B;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM,CAAE,CAA9B;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM,CAAE,CAA9B;;AACA,IAAMC,gBAAgB,GAAG,IAAIP,KAAJ,CAAUI,WAAV,CAAzB;AACA,IAAMI,kBAAkB,GAAG,IAAIR,KAAJ,CAAUK,aAAV,CAA3B;AACA,IAAMI,kBAAkB,GAAG,IAAIT,KAAJ,CAAUM,aAAV,CAA3B;AAEAC,gBAAgB,CAACL,OAAjB,CAAyBM,kBAAzB;AACAD,gBAAgB,CAACJ,GAAjB,IAEA","file":"script.75da7f30.js","sourceRoot":"..","sourcesContent":["/**\n *  trying out a couple of patterns from https://medium.com/javascript-in-plain-english/4-useful-javascript-design-patterns-you-should-know-b4e1404e3929\n */\n\n// Strategy pattern:\nconst list = ['a', 'b'];\nconst strategies = {\n  checkRole: function (val) {\n    return val === 'registered';\n  },\n  checkGrade: function (val) {\n    return val > 1;\n  },\n  checkJob: function (val) {\n    return list.includes(val);\n  },\n  checkType: function (val) {\n    return val === 'active';\n  },\n};\n\nclass Validator {\n  constructor() {\n    this.cache = [];\n    this.validationResult = true;\n    this.add = (val, method) => {\n      this.cache.push(() => {\n        return strategies[method](val);\n      });\n    };\n    this.check = () => {\n      this.cache.forEach((element) => {\n        const validatorCheck = element;\n        const data = validatorCheck();\n        if (!data) this.validationResult = false;\n      });\n      return this.validationResult;\n    };\n  }\n}\n\nconst testData = {\n  role: 'registered',\n  grade: 3,\n  job: 'a',\n  type: 'active',\n};\n\nconst compose = () => {\n  const validator = new Validator();\n  validator.add(testData.role, 'checkRole');\n  validator.add(testData.grade, 'checkGrade');\n  validator.add(testData.type, 'checkType');\n  validator.add(testData.job, 'checkJob');\n\n  const result = validator.check();\n  return result;\n};\n\nconst validationResult = compose();\nconsole.log('validation result: ', validationResult);\n\n// PubSub pattern\n// eventEmitter and stuff\nclass EventEmitter {\n  constructor() {\n    this.events = {};\n    this.on = (eventName, callback) => {\n      this.events[eventName]\n        ? this.events[eventName].push(callback)\n        : (this.events[eventName] = [callback]);\n    };\n    this.trigger = (eventName, ...arg) => {\n      if (this.events[eventName]) {\n        this.events[eventName].forEach((listener) => {\n          listener(...arg);\n        });\n      }\n    };\n  }\n}\n\nconst eventEmitter = new EventEmitter();\neventEmitter.on('success', () => {\n  console.log('success event happened!');\n});\n\neventEmitter.trigger('success');\n\n// Decorator pattern\nclass Write {\n  constructor() {\n    this.writeTurkish = () => {\n      console.log('kebab kebab');\n    };\n  }\n}\n\nclass Decorator {\n  constructor(old) {\n    this.oldWrite = old.writeTurkish;\n    this.writeEnglish = () => {\n      console.log('oh i would like a cup of tea');\n    };\n    this.newWrite = () => {\n      this.oldWrite();\n      this.writeEnglish();\n    };\n  }\n}\n\nconst newSkill = {\n  writeEnglish() {\n    return console.log('oh i would like a cup of tea');\n  },\n};\n\nconst smartGuy = new Write();\nconst decorator = new Decorator(smartGuy);\ndecorator.newWrite();\n\n// mixin pattern:\nObject.assign(Write.prototype, newSkill);\nconst sameGuy = new Write();\nsameGuy.writeTurkish();\nsameGuy.writeEnglish();\n\n// another example\n// https://alligator.io/js/using-js-mixins/\nlet swim = {\n  setSwimProperties(speed, direction) {\n    this.speed = speed;\n    this.direction = direction;\n  },\n\n  getSwimProperties() {\n    console.log(`swimming ${this.speed} towards ${this.direction}`);\n  },\n};\n\nclass Reptile {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nlet alligator = new Reptile('alligator');\nObject.assign(Reptile.prototype, swim);\nalligator.setSwimProperties('5 m/s', 'upstream');\nalligator.getSwimProperties();\n\n/**\n * Chain of Responsibility Pattern\n */\n// this goes for trrrrond\nclass Chain {\n  constructor(fn) {\n    this.fn = fn;\n    this.setNext = () => {};\n    this.run = () => {};\n  }\n}\n\nconst applyDevice = () => {};\nconst selectAddress = () => {};\nconst selectChecker = () => {};\nconst chainApplyDevice = new Chain(applyDevice);\nconst chainSelectAddress = new Chain(selectAddress);\nconst chainSelectChecker = new Chain(selectChecker);\n\nchainApplyDevice.setNext(chainSelectAddress);\nchainApplyDevice.run();\n\n// yields error tho, wtf..\n"]}